generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ResetPasswordRequest {
  id      String   @unique @default(uuid())
  email   String   @unique
  created DateTime @default(now())
  expires DateTime @default(now())
  reset   Boolean  @default(false)

  @@map("reset_password_request")
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]

  username String
  name     String?
  email    String   @unique
  roles    String[]
  active   Boolean  @default(true)
  avatar   String   @default("no_profile_picture.webp")
  crumbs   Crumb[]
  trail    Trail[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Trail {
  id           String     @unique @default(uuid())
  title        String
  description  String
  image        String
  imageAlt     String
  slug         String     @unique
  crumbs       Crumb[]
  contributors AuthUser[]

  @@map("trail")
}

model Crumb {
  id          String   @unique @default(uuid())
  title       String
  description String
  image       String
  imageAlt    String
  trailId     String
  trail       Trail    @relation(references: [id], fields: [trailId])
  authorId    String
  author      AuthUser @relation(references: [id], fields: [authorId])
  slug        String   @unique

  @@index([trailId])
  @@map("crumb")
}
